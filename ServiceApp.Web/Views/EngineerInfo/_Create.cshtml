@model  ServiceApp.Domain.DataModel.EngineerInfo


<!-- BEGIN PAGE LEVEL PLUGINS -->
<link href="~/Assets/global/plugins/bootstrap-datepicker/css/bootstrap-datepicker3.min.css" rel="stylesheet" type="text/css" />
<!-- END PAGE LEVEL PLUGINS -->
<!-- BEGIN PAGE LEVEL PLUGINS -->
<script src="~/Assets/global/plugins/bootstrap-datepicker/js/bootstrap-datepicker.min.js" type="text/javascript"></script>
<!-- END PAGE LEVEL PLUGINS -->

<div class="modal-header">
    <button type="button" class="close" data-dismiss="modal" aria-hidden="true"></button>
    <h4 class="modal-title">Add Engineer Information</h4>
</div>

@if (ViewData.ModelState.IsValid)
{
    if (@ViewBag.Message != null)
    {
        <div class="alert alert-success">
            <a class="close" data-dismiss="alert">×</a>
            @ViewBag.Message
        </div>
    }
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken();
    <div class="modal-body">
        <div class="form-horizontal">
            @if (!ViewData.ModelState.IsValid)
            {
            <div class="alert alert-danger">
                <a class="close" data-dismiss="alert">×</a>
                <strong>Validation Errors</strong>
                @Html.ValidationSummary()
            </div>
            }

            <div class="form-group">
                @Html.LabelFor(model => model.Email, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Email, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Name, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Name, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.PhoneNumber, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.PhoneNumber, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.PhoneNumber, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.City, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.City, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.City, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.State, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.State, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.State, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Pincode, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Pincode, new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Pincode, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.MembershipType, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.DropDownList("MembershipType", new List<SelectListItem>

                 {
                   new SelectListItem{ Text="Select", Value = "Select" },
                   new SelectListItem{ Text="Free", Value = "Free" },
                    new SelectListItem{ Text="Paid", Value = "Paid" }

                 }, new { @class = "form-control" })
                </div>
            </div>

            <div class="form-group" id="dvStartDate" style="display:none;">
                @Html.LabelFor(model => model.StartDate, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.StartDate, new { @class = "form-control datepicker", @readonly = "readonly" })
                </div>
            </div>

            <div class="form-group" id="dvEndDate" style="display:none;">
                @Html.LabelFor(model => model.EndDate, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.EndDate, new { @class = "form-control", @readonly = "readonly" })
                </div>
            </div>

            <div class="form-group" id="dvAmount" style="display:none;">
                @Html.LabelFor(model => model.Amount, new { @class = "control-label col-md-3" })
                <div class="col-md-6">
                    @Html.TextBoxFor(model => model.Amount, new { @class = "form-control" })
                </div>
            </div>

        </div>
    </div>

    <div class="modal-footer">
        <button type="button" class="btn dark btn-outline" data-dismiss="modal">Close</button>
        <input class="btn green" type="submit" value="Save" />
    </div>
}

<script type="text/javascript">
    $(function () { // will trigger when the document is ready
        $('.datepicker').datepicker({
            format: 'dd-mm-yyyy'
        })
       .on('changeDate', function (e) {
           var oldDate = new Date(e.date);
           var newDate = new Date();
           newDate.setDate(oldDate.getDate() + 30);

           $("#EndDate").val(('0' + newDate.getDate()).slice(-2) + "-" + ('0' + (newDate.getMonth() + 1)).slice(-2) + "-" + newDate.getFullYear());
       });

        if ($("#MembershipType option:selected").val() == "Paid") {
            $("#dvStartDate").css("display", "block");
            $("#dvEndDate").css("display", "block");
            $("#dvAmount").css("display", "block");
        }

        $("#MembershipType").change(function () {
            var MembershipType = $("#MembershipType option:selected").val();
            if (MembershipType == "Paid") {
                $("#dvStartDate").css("display", "block");
                $("#dvEndDate").css("display", "block");
                $("#dvAmount").css("display", "block");
            } else {
                $("#StartDate").val("");
                $("#EndDate").val("");
                $("#Amount").val("");

                $("#dvStartDate").css("display", "none");
                $("#dvEndDate").css("display", "none");
                $("#dvAmount").css("display", "none");
            }
        });

    });
</script>


